[{"title":"琦琦的简历","date":"2017-03-17T16:01:27.443Z","path":"2017/03/18/qiqi/","text":"#我叫琦宝宝","tags":[]},{"title":"HTML5","date":"2017-03-09T15:19:49.868Z","path":"2017/03/09/html5/","text":"HTML5 HTML5并不仅仅只是做为HTML标记语言的一个最新版本，更重要的是它制定了Web应用开发的一系列标准，成为第一个将Web做为应用开发平台的HTML语言。 HTML5定义了一系列新元素，如新语义标签、智能表单、多媒体标签等，可以帮助开发者创建富互联网应用，还提供了一些Javascript API，如地理定位、重力感应、硬件访问等，可以在浏览器内实现类原生应用，甚至结合Canvas我们可开发网页版游戏。 语义标签常见语义标签 本质上新语义标签与、没有区别，只是其具有表意性，使用时除了在HTML结构上需要注意外，其它和普通标签的使用无任何差别，可以理解成 相当于 。不要好奇，它只是一个标签！ 尽量避免全局使用header、footer、aside等语义标签。 标签 语义 nav 导航 header 页眉 footer 页脚 section 区块 article 文章 aside 侧边栏 figure 内容分组 兼容处理 在不支持HTML5新标签的浏览器里，会将这些新的标签解析成行内元素(inline)对待，所以我们只需要将其转换成块元素(block)即可使用，但是在IE9版本以下，并不能正常解析这些新标签，但是却可以识别通过document.createElement(‘tagName’)创建的自定义标签，于是我们的解决方案就是将HTML5的新标签全部通过document.createElement(‘tagName’)来创建一遍，这样IE低版本也能正常解析HTML5新标签了，在实际开发中我们更多采用的是通过检测IE浏览器的版本来加载第三方的一个JS库来解决兼容问题。pan&gt; ‘) 表单 部分类型是针对移动设备生效的，且具有一定的兼容性，在实际应用当中可选择性的使用。 input类型 输入类型 功能 email 输入邮箱格式 tel 手机号码格式 url url格式 number 只能输入数字 search 搜索框 range 范围 color 颜色 time 时间 date 日期 datetime 时间日期 month 月份 week 星期 表单元素 跟input（同级）的元素 标签 功能 datalist 下拉选项，使用中文时要注意 keygen 生成加密字符串 output 不可当作数据提交 meter 表示都聊条，不建议作为进度条 表单属性 属性 功能 placeholder 占位符 autofocus 获取焦点 multiple 文件上传多选或多个邮箱地址 autocomplete 自动完成，用于form元素，也可用于部分input，默认为on form 指定表单项属于哪个form，处理复杂表单时会需要 novalidate 关闭验证，可用于标签an&gt; required 验证条件，必填项font&gt; pattern 正则表达式 自定义验证规则 表单事件 事件 功能 oninput 用户输入内容是触发 oninvalid 验证不通过时触发 多媒体 音频audio 1&lt;autio src='angular.mp3'&gt;&lt;/autio&gt; //兼容不同的格式 &lt;source src=&apos;angular.mp3&apos;&gt; &lt;source src=&apos;angular.wav&apos;&gt; &lt;source src=&apos;angular.ogg&apos;&gt; 您的浏览器不支持当前格式 12345678910111213 &gt; autoplay 自动播放 &gt; &gt; controls 是否显不默认播放控件 &gt; &gt; loop 循环播放 &gt; &gt; preload 预加载 同时设置autoplay时些属性失效+ 视频video ```html &lt;video src=&apos;angular.pm4&apos;&gt;&lt;/video&gt; autoplay 自动播放 controls 是否显示默认播放控件 loop 循环播放 preload 预加载，同时设置了autoplay，此属性将失效 width 设置播放窗口宽度 height 设置播放窗口的高度 DOM扩展 获取元素 document.querySelector() document.querySelectorAll() 类名操作 | 方法 | 功能 || ——————————– | ——— || Node.classList.add(‘class’) | 添加class || Node.classList.remove(‘class’) | 移出css || Node.classList.toggle(‘class’) | 切换css || Node.classList.contains(‘class’) | 检查是否存在css | ​ 自定义属性 在HTML5中我们可以自定义属性，其格式如下data-*=””，例如data-info=”我是自定义属性”，通过Node.dataset[‘info’] 我们便可以获取到自定义的属性值。 Node.dataset是以对象形式存在的 当我们如下格式设置时，则需要以驼峰格式才能正确获取 data-my-name=”itcast”，获取Node.dataset[‘myName’] 新增API","tags":[]},{"title":"git笔记","date":"2017-03-09T15:19:49.865Z","path":"2017/03/09/git/","text":"git笔记（分布式版本控制软件） 保存历史记录 多人协作 有了svn 为什么还要学git 火 更强大 基本使用 git init 创建版本管理仓库 git status 查看仓库状态 git add 添加改动到暂存区 git add file1 file2 git add dir1 dir2 git add 。 git add –all git config -list 查看配置列表 git commit 将暂存区提交到本地仓库（只有配置了用户名和邮箱才能commit） git log 查看提交日志 gitk 以图形华界面查看提交日志 git rm –cached filesname 将暂存区拉回到工作区","tags":[]},{"title":"BootStrap复习","date":"2017-03-09T15:19:49.861Z","path":"2017/03/09/bootstrap/","text":"BootStrap复习bootStrap基本结构bootStrap CSSbootStrap 布局组件bootStrap 插件","tags":[]},{"title":"svn","date":"2017-03-09T15:19:49.850Z","path":"2017/03/09/svn/","text":"svn（Apache Subversion）笔记别人访问 https://kyle/svn/admin 本机访问 https://ip地址/svn/admin 版本控制工具 多人协作开发 版本中央服务器 帮你保存历史记录 把所有用户通过这个中央服务器进行协同交互 中央服务器上可以存放多个项目的源代码仓库 用户开发项目都是和这个源代码仓库进行协同 服务器对于接收到的每一次的commit都会使用你的commit的文件覆盖到最新版本，然后帮你保存历史记录 在没有源代码的前提下 通过checkout的方式把服务器上的源代码下载到本地（检出） 再该仓库目录下开发：添加文件、修改文件、删除文件。 如果你想保存历史纪录：通过commit的形式提交非服务器，只要commit 一次，则服务器就会帮你保存一次历史记录，假如我再本地添加一个data.txt写了一些内容hello world 开发人员，再没有源代码的情况下，通过checkout的方式吧源代码下载到本地，以后就可以通过update（拉取最新源代码）和commit（推到远程版本管理服务器，形成一次新的历史版本）实现多人协作 注意大多数公司现如今用的是git 用svn的很少，因为svn有很多缺点","tags":[]},{"title":"Hello World","date":"2017-03-09T13:36:58.558Z","path":"2017/03/09/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]},{"title":"jquery复习","date":"2017-03-02T00:59:52.694Z","path":"2017/03/02/jquery/","text":"jquery复习 jquery版本 常用2.0.2 &amp; 1.10.2 文档就绪&amp;&amp;入口函数123456$(document).ready(function()&#123;// 开始写 jQuery 代码...&#125;);$(function()&#123;// 开始写 jQuery 代码...&#125;); jquery选择器 jQuery 选择器允许您对 HTML 元素组或单个元素进行操作。 jQuery 选择器基于元素的 id、类、类型、属性、属性值等”查找”（或选择）HTML 元素。 它基于已经存在的 CSS 选择器，除此之外，它还有一些自定义的选择器。 jQuery 中所有选择器都以美元符号开头：$()。 元素选择器 $(‘p’) ID选择器 $(‘#test’) class选择 $(‘.test’) 其他选择器 $(‘*’) 选取所有的元素 $(this)选取当前HTML元素 $(‘p.intro’)选取class为intro的p元素 $(“p:first”)选取第一个p元素 $(‘ul li:first’) 选取第一个ul元素的第一个li $(‘ul li:first-child’)选取每一个ul元素的第一个li $(‘[href]’)选取带有href属性的元素 $(‘a[target=”_black”]’)选取所有target属性值等于——blank的a元素 $(‘a[target!=”_black”]’)选取所有target属性值不等于——blank的a元素 $(‘:button’) 选取所有type =’button’ 的input元素和button元素 $(‘tr:even’) 选取偶数位置的tr元素 $(‘tr:odd’) 选取奇数位置的tr元素 事件鼠标事件 click dbclick mouseenter mouseleave 键盘事件 keypress keydown keyup 表单事件 submit change focus blur 窗口事件 load resize scroll unload 效果隐藏显示1234567891011$(\"#hide\").click(function()&#123; $(\"p\").hide();//显示&#125;); $(\"#show\").click(function()&#123; $(\"p\").show();//隐藏&#125;);$(\"button\").click(function()&#123; $(\"p\").toggle();//切换&#125;); 淡入淡出1234567891011121314151617181920212223$(\"button\").click(function()&#123; $(\"#div1\").fadeIn(); $(\"#div2\").fadeIn(\"slow\"); $(\"#div3\").fadeIn(3000);&#125;);$(\"button\").click(function()&#123; $(\"#div1\").fadeOut(); $(\"#div2\").fadeOut(\"slow\"); $(\"#div3\").fadeOut(3000);&#125;);$(\"button\").click(function()&#123; $(\"#div1\").fadeToggle(); $(\"#div2\").fadeToggle(\"slow\"); $(\"#div3\").fadeToggle(3000);&#125;);$(\"button\").click(function()&#123; $(\"#div1\").fadeTo(\"slow\",0.15); $(\"#div2\").fadeTo(\"slow\",0.4); $(\"#div3\").fadeTo(\"slow\",0.7);&#125;); 滑动1234567891011$(\"#flip\").click(function()&#123; $(\"#panel\").slideDown();//向下滑动&#125;);$(\"#flip\").click(function()&#123; $(\"#panel\").slideUp();//向上滑动&#125;);$(\"#flip\").click(function()&#123; $(\"#panel\").slideToggle();//切换&#125;); 动画当使用 animate() 时，必须使用 Camel 标记法书写所有的属性名，比如，必须使用 paddingLeft 而不是 padding-left，使用 marginRight 而不是 margin-right，等等。 123456789$(\"div\").animate(&#123;left:'250px'&#125;,'slow',function ()&#123; alert('end') &#125;);/***$(selector).animate(&#123;params&#125;,speed,callback);*params参数定义形成动画的 CSS 属性。*sepeed 参数规定效果的时长。它可以取以下值：\"slow\"、\"fast\" 或毫秒。*callback参数是动画完成后所执行的函数名称。*/ 停止动画 stop() 用在动画效果之前， 123456$(\".block1\").mouseenter(function()&#123; $(\".ftlo\").stop().animate(&#123;\"top\":-33&#125;,500); &#125;); $(\".block1\").mouseleave(function()&#123; $(\".ftlo\").stop().animate(&#123;\"top\":0&#125;,500); &#125;); callback12345678910$(\"button\").click(function()&#123; $(\"p\").hide(\"slow\",function()&#123; alert(\"段落现在被隐藏了\");//在隐藏效果完成后，实现回调函数 &#125;);&#125;);$(\"button\").click(function()&#123; $(\"p\").hide(1000); alert(\"段落现在被隐藏了\");//警告框会在隐藏效果完成前弹出&#125;); 链式编程12345$(\"button\").click(function()&#123; $(\"#p1\").css(\"color\",\"red\") .slideUp(2000) .slideDown(2000); &#125;); HTML捕获 text()设置或者返回所选元素的文本内容 html()设置或者返回所选元素的文本内容（包括HTML标记） val()设置或者返回表单字段的值 attr()获取属性值 1234567891011&lt;p id=\"test\"&gt;这是段落中的 &lt;b&gt;粗体&lt;/b&gt; 文本。&lt;/p&gt;&lt;button id=\"btn1\"&gt;显示文本&lt;/button&gt;&lt;button id=\"btn2\"&gt;显示 HTML&lt;/button&gt; $(\"#btn1\").click(function()&#123; alert($(\"#test\").text());//这是段落中的粗体文本 &#125;); $(\"#btn2\").click(function()&#123; alert($(\"#test\").html());//这是段落中的&lt;b&gt;粗体&lt;/b&gt;文本 (包括HTML标记) &#125;); 123$(\"#btn1\").click(function()&#123;alert(\"值为: \" + $(\"#test\").val());//返回表单文本（输入框内容）&#125;); 123456&lt;p&gt;&lt;a href=\"http://www.runoob.com\" id=\"runoob\" a = '123'&gt;菜鸟教程&lt;/a&gt;&lt;/p&gt;$(\"button\").click(function()&#123;alert($(\"#runoob\").attr(\"href\"));//http://www.runoob.comalert($(\"#runoob\").attr(\"id\"));//runoobalert($(\"#runoob\").attr(\"a\"));//123&#125;); 设置 text() html() val() attr() 123456789$(\"#btn1\").click(function()&#123; $(\"#test1\").text(\"Hello world!\");&#125;);$(\"#btn2\").click(function()&#123; $(\"#test2\").html(\"&lt;b&gt;Hello world!&lt;/b&gt;\");&#125;);$(\"#btn3\").click(function()&#123; $(\"#test3\").val(\"RUNOOB\");&#125;); 添加元素 append() 在被选元素的结尾插入内容 prepend()在被选元素的开头插入内容 after()在被选元素之后插入内容 before()在被选元素之前插入内容 删除元素 remove（）删除被选元素以及所有子元素 可以有参数$(‘p’).remove（’.italic’） 删除p元素中class为italic的元素 empty（）删除被选元素中的子元素 css类 addClass() 向被选元素添加一个或多个类 removeClass()从被选元素删除一个或多个类 toggleClass()对被选元素进行添加删除类的切换操作 css()设置或者返回样式属性 css（）方法 获取css属性 设置css属性 设置多个css属性 123$(\"p\").css(\"background-color\");//获取$(\"p\").css(&#123;\"background-color\":\"yellow\",\"font-size\":\"200%\"&#125;);//设置多个 尺寸 width()获取元素内容的宽 height()获取元素内容的高 innerWidth()获取元素的宽度（包含内边距） innerHeight()获取元素的高度（包含内边距） outerWidth()获取元素的宽度（包含内边距和边框） outerHeight()获取元素的高度（包含内边距和边框） 1234567891011121314151617181920212223242526272829303132&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=\"utf-8\"&gt;&lt;script src=\"https://cdn.static.runoob.com/libs/jquery/1.10.2/jquery.min.js\"&gt;&lt;/script&gt;&lt;script&gt;$(document).ready(function()&#123; $(\"button\").click(function()&#123; var txt=\"\"; txt+=\"div 宽度: \" + $(\"#div1\").width() + \"&lt;/br&gt;\";//300 txt+=\"div 高度: \" + $(\"#div1\").height() + \"&lt;/br&gt;\";//100 txt+=\"div 宽度，包含内边距: \" + $(\"#div1\").innerWidth() + \"&lt;/br&gt;\";//320 txt+=\"div 高度，包含内边距: \" + $(\"#div1\").innerHeight() + \"&lt;/br&gt;\";//120 txt+=\"div 宽度，包含内边距和边框: \" + $(\"#div1\").outerWidth() + \"&lt;/br&gt;\";//322 txt+=\"div 高度，包含内边距和边框: \" + $(\"#div1\").outerHeight();//122 $(\"#div1\").html(txt); &#125;);&#125;);&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=\"div1\" style=\"height:100px;width:300px;padding:10px;margin:3px;border:1px solid blue;background-color:lightblue;\"&gt;&lt;/div&gt;&lt;br&gt;&lt;button&gt;显示 div 元素的尺寸&lt;/button&gt;&lt;p&gt;outerWidth() - 返回元素的宽度 (包含内边距和边框)。&lt;/p&gt;&lt;p&gt;outerHeight() - 返回元素的高度 (包含内边距和边框)。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 遍历遍历祖先(向上遍历DOM树) parent（） 返回被选元素的直接父元素 该方法只会向上一句对DOM树进行遍历 ​ parents（） 返回被选元素的所有祖先元素，它一路向上直到文档的根元素 ()。 可以传入一个过滤参数 parents（‘ul’）选中所有父元素中的ul parentsUntil（） 返回两个给定元素之间的所有元素 123$(document).ready(function()&#123; $(\"span\").parentsUntil(\"div\");//返回span和div之间的所有元素&#125;); ​ 后代 children（） 返回被选元素的所有直接子元素 只会向下一级对DOM树进行遍历 可以添加一个过滤元素 1234567$(document).ready(function()&#123; $(\"div\").children();&#125;);$(document).ready(function()&#123; $(\"div\").children(\"p.1\");&#125;); ​ find（） find（‘选择器’）返回子代所有的被选元素 find（‘*’）返回子代所有的元素 同胞 siblings 被指定同级所有 返回被选元素的所有同级元素 返回被选元素的同级指定元素 123456$(document).ready(function()&#123; $(\"h2\").siblings();&#125;);$(document).ready(function()&#123; $(\"h2\").siblings(\"p\");&#125;); ​ next被指定后面 next() 返回被选元素的下一个同级元素 nextAll() 返回被选元素的下面的所有的同级元素 nextUntil() 返回被指定两个同级元素之间的所有同级元素 prev被指定前面 prev() 返回被选元素的上一个同级元素 prevAll() 返回被选元素的上面的所有的同级元素 prevUntil() 返回被指定两个同级元素之间的所有同级元素 过滤 first（） 返回所有被选元素中的第一个 last（） 返回所有被选元素中的最后一个 eq（） 返回所有被选元素中的第n个元素 n从0开始计算 filter（） 返回带有类名或者id名的所有的指定元素； not（） 返回不带有类名或者id名的所有的指定元素； AJAX简介 AJAX 是与服务器交换数据的技术，它在不重载全部页面的情况下，实现了对部分网页的更新。 load（）方法get（）post（）方法 get&amp;&amp;post请求对比​ 后退按钮/刷新 无害 数据会被重新提交（浏览器应该告知用户数据会被重新提交）。 书签 可收藏为书签 不可收藏为书签 缓存 能被缓存 不能缓存 编码类型 application/x-www-form-urlencoded application/x-www-form-urlencoded or multipart/form-data。为二进制数据使用多重编码。 历史 参数保留在浏览器历史中。 参数不会保存在浏览器历史中。 对数据长度的限制 是的。当发送数据时，GET 方法向 URL 添加数据；URL 的长度是受限制的（URL 的最大长度是 2048 个字符）。 无限制。 对数据类型的限制 只允许 ASCII 字符。 没有限制。也允许二进制数据。 安全性 与 POST 相比，GET 的安全性较差，因为所发送的数据是 URL 的一部分。在发送密码或其他敏感信息时绝不要使用 GET ！ POST 比 GET 更安全，因为参数不会被保存在浏览器历史或 web 服务器日志中。 可见性 数据在 URL 中对所有人都是可见的。 数据不会显示在 URL 中。 noConflict（）方法 正如您已经了解到的，jQuery 使用 $ 符号作为 jQuery 的简写。 如果其他 JavaScript 框架也使用 $ 符号作为简写怎么办？ 其他一些 JavaScript 框架包括：MooTools、Backbone、Sammy、Cappuccino、Knockout、JavaScript MVC、Google Web Toolkit、Google Closure、Ember、Batman 以及 Ext JS。 其中某些框架也使用 $ 符号作为简写（就像 jQuery），如果您在用的两种不同的框架正在使用相同的简写符号，有可能导致脚本停止运行。 jQuery 的团队考虑到了这个问题，并实现了 noConflict() 方法。 123456789101112131415161718192021$.noConflict();//此时不能用$ jQuery(document).ready(function()&#123; jQuery(\"button\").click(function()&#123; jQuery(\"p\").text(\"jQuery 仍然在工作!\"); &#125;);&#125;);var jq = $.noConflict();jq(document).ready(function()&#123; jq(\"button\").click(function()&#123; jq(\"p\").text(\"jQuery 仍然在工作!\"); &#125;);&#125;);$.noConflict();jQuery(document).ready(function($)&#123; $(\"button\").click(function()&#123; $(\"p\").text(\"jQuery 仍然在工作!\"); &#125;);&#125;); JSONPjquery插件","tags":[]}]